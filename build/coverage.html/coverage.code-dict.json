{"/home/travis/build/npmtest/node-npmtest-ember-sortable/test.js":"/* istanbul instrument in package npmtest_ember_sortable */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/lib.npmtest_ember_sortable.js":"/* istanbul instrument in package npmtest_ember_sortable */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_sortable = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_sortable = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-sortable && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_sortable */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_sortable\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_sortable.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_sortable.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_sortable.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_sortable.__dirname + '/lib.npmtest_ember_sortable.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-sortable'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/addon/components/sortable-group.js":"import Ember from 'ember';\nimport layout from '../templates/components/sortable-group';\nimport computed from 'ember-new-computed';\nimport {invokeAction} from 'ember-invoke-action';\n\nconst { A, Component, get, set, run } = Ember;\nconst a = A;\nconst NO_MODEL = {};\n\nexport default Component.extend({\n  layout: layout,\n\n  attributeBindings: ['data-test-selector'],\n\n  /**\n    @property direction\n    @type string\n    @default y\n  */\n  direction: 'y',\n\n  /**\n    @property model\n    @type Any\n    @default null\n  */\n  model: NO_MODEL,\n\n  /**\n    @property items\n    @type Ember.NativeArray\n  */\n  items: computed(() => a()),\n\n  /**\n    Position for the first item.\n    If spacing is present, first item's position will have to change as well.\n    @property itemPosition\n    @type Number\n  */\n  itemPosition: computed(function() {\n    let direction = this.get('direction');\n\n    return this.get(`sortedItems.firstObject.${direction}`) - this.get('sortedItems.firstObject.spacing');\n  }).volatile(),\n\n  /**\n    @property sortedItems\n    @type Array\n  */\n  sortedItems: computed(function() {\n    let items = a(this.get('items'));\n    let direction = this.get('direction');\n\n    return items.sortBy(direction);\n  }).volatile(),\n\n  /**\n    Register an item with this group.\n    @method registerItem\n    @param {SortableItem} [item]\n  */\n  registerItem(item) {\n    this.get('items').addObject(item);\n  },\n\n  /**\n    De-register an item with this group.\n    @method deregisterItem\n    @param {SortableItem} [item]\n  */\n  deregisterItem(item) {\n    this.get('items').removeObject(item);\n  },\n\n  /**\n    Prepare for sorting.\n    Main purpose is to stash the current itemPosition so\n    we don’t incur expensive re-layouts.\n    @method prepare\n  */\n  prepare() {\n    this._itemPosition = this.get('itemPosition');\n  },\n\n  /**\n    Update item positions (relatively to the first element position).\n    @method update\n  */\n  update() {\n    let sortedItems = this.get('sortedItems');\n    // Position of the first element\n    let position = this._itemPosition;\n\n    // Just in case we haven’t called prepare first.\n    if (position === undefined) {\n      position = this.get('itemPosition');\n    }\n\n    sortedItems.forEach(item => {\n      let dimension;\n      let direction = this.get('direction');\n\n      if (!get(item, 'isDragging')) {\n        set(item, direction, position);\n      }\n\n      // add additional spacing around active element\n      if (get(item, 'isBusy')) {\n        position += get(item, 'spacing') * 2;\n      }\n\n      if (direction === 'x') {\n        dimension = 'width';\n      }\n      if (direction === 'y') {\n        dimension = 'height';\n      }\n\n      position += get(item, dimension);\n    });\n  },\n\n  /**\n    @method commit\n  */\n  commit() {\n    let items = this.get('sortedItems');\n    let groupModel = this.get('model');\n    let itemModels = items.mapBy('model');\n    let draggedItem = items.findBy('wasDropped', true);\n    let draggedModel;\n\n    if (draggedItem) {\n      set(draggedItem, 'wasDropped', false); // Reset\n      draggedModel = get(draggedItem, 'model');\n    }\n\n    delete this._itemPosition;\n\n    run.schedule('render', () => {\n      items.invoke('freeze');\n    });\n\n    run.schedule('afterRender', () => {\n      items.invoke('reset');\n    });\n\n    run.next(() => {\n      run.schedule('render', () => {\n        items.invoke('thaw');\n      });\n    });\n\n    if (groupModel !== NO_MODEL) {\n      invokeAction(this, 'onChange', groupModel, itemModels, draggedModel);\n    } else {\n      invokeAction(this, 'onChange', itemModels, draggedModel);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/addon/components/sortable-item.js":"import Ember from 'ember';\nimport layout from '../templates/components/sortable-item';\nimport SortableItemMixin from '../mixins/sortable-item';\n\nexport default Ember.Component.extend(SortableItemMixin, {\n  layout\n});\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/addon/helpers/drag.js":"import Ember from 'ember';\nconst { $ } = Ember;\n\n/**\n  Drags elements by an offset specified in pixels.\n\n  Examples\n\n      drag(\n        'mouse',\n        '.some-list li[data-item=uno]',\n        function() {\n          return { dy: 50, dx: 20 };\n        }\n      );\n\n  @method drag\n  @param {'mouse'|'touch'} [mode]\n    event mode\n  @param {String} [itemSelector]\n    selector for the element to drag\n  @param {Function} [offsetFn]\n    function returning the offset by which to drag\n  @param {Object} [callbacks]\n    callbacks that are fired at the different stages of the interaction\n  @return {Promise}\n*/\n\nexport function drag(app, mode, itemSelector, offsetFn, callbacks = {}) {\n  let start, move, end, which;\n\n  const {\n    andThen,\n    findWithAssert,\n    wait\n  } = app.testHelpers;\n\n  if (mode === 'mouse') {\n    start = 'mousedown';\n    move = 'mousemove';\n    end = 'mouseup';\n    which = 1;\n  } else if (mode === 'touch') {\n    start = 'touchstart';\n    move = 'touchmove';\n    end = 'touchend';\n  } else {\n    throw new Error(`Unsupported mode: '${mode}'`);\n  }\n\n  andThen(() => {\n    let item = findWithAssert(itemSelector);\n    let itemOffset = item.offset();\n    let offset = offsetFn();\n    let itemElement = item.get(0);\n    let rect = itemElement.getBoundingClientRect();\n    let scale = itemElement.clientHeight / (rect.bottom - rect.top);\n    let targetX = itemOffset.left + offset.dx * scale;\n    let targetY = itemOffset.top + offset.dy * scale;\n\n    triggerEvent(app, item, start, {\n      pageX: itemOffset.left,\n      pageY: itemOffset.top,\n      which\n    });\n\n    if (callbacks.dragstart) {\n      andThen(callbacks.dragstart);\n    }\n\n    triggerEvent(app, item, move, {\n      pageX: itemOffset.left,\n      pageY: itemOffset.top\n    });\n\n    if (callbacks.dragmove) {\n      andThen(callbacks.dragmove);\n    }\n\n    triggerEvent(app, item, move, {\n      pageX: targetX,\n      pageY: targetY\n    });\n\n    triggerEvent(app, item, end, {\n      pageX: targetX,\n      pageY: targetY\n    });\n\n    if (callbacks.dragend) {\n      andThen(callbacks.dragend);\n    }\n  });\n\n  return wait();\n}\n\nfunction triggerEvent(app, el, type, props) {\n  return app.testHelpers.andThen(() => {\n    let event = $.Event(type, props);\n    $(el).trigger(event);\n  });\n}\n\nexport default Ember.Test.registerAsyncHelper('drag', drag);\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/addon/helpers/reorder.js":"import Ember from 'ember';\n\n/**\n  In tests, the dummy app is rendered at half size.\n  To avoid rounding errors, we must therefore double\n  the overshoot.\n*/\nconst OVERSHOOT = 2;\n\n/**\n  Reorders elements to the specified state.\n\n  Examples\n\n      reorder(\n        'mouse',\n        '.some-list li',\n        '[data-id=\"66278893\"]',\n        '[data-id=\"66278894\"]',\n        '[data-id=\"66278892\"]'\n      );\n\n  @method reorder\n  @param {'mouse'|'touch'} [mode]\n    event mode\n  @param {String} [itemSelector]\n    selector for all items\n  @param {...String} [resultSelectors]\n    selectors for the resultant order\n  @return {Promise}\n*/\n\nexport function reorder(app, mode, itemSelector, ...resultSelectors) {\n  const {\n    andThen,\n    drag,\n    findWithAssert,\n    wait\n  } = app.testHelpers;\n\n  resultSelectors.forEach((selector, targetIndex) => {\n    andThen(() => {\n      let items = findWithAssert(itemSelector);\n      let element = items.filter(selector);\n      let targetElement = items.eq(targetIndex);\n      let dx = targetElement.offset().left - OVERSHOOT - element.offset().left;\n      let dy = targetElement.offset().top - OVERSHOOT - element.offset().top;\n\n      drag(mode, element, () => { return { dx: dx, dy: dy }; });\n    });\n  });\n\n  return wait();\n}\n\nexport default Ember.Test.registerAsyncHelper('reorder', reorder);\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/addon/mixins/sortable-item.js":"import Ember from 'ember';\nimport computed from 'ember-new-computed';\nimport scrollParent from '../system/scroll-parent';\nimport ScrollContainer from '../system/scroll-container';\nimport {invokeAction} from 'ember-invoke-action';\nimport { throttle } from 'ember-runloop';\n\nconst { Mixin, $, run } = Ember;\nconst { Promise } = Ember.RSVP;\n\nexport default Mixin.create({\n  classNames: ['sortable-item'],\n  classNameBindings: ['isDragging', 'isDropping'],\n\n  attributeBindings: ['data-test-selector'],\n\n  /**\n    Group to which the item belongs.\n    @property group\n    @type SortableGroup\n    @default null\n  */\n  group: null,\n\n  /**\n    Model which the item represents.\n    @property model\n    @type Object\n    @default null\n  */\n  model: null,\n\n  /**\n    Selector for the element to use as handle.\n    If unset, the entire element will be used as the handle.\n    @property handle\n    @type String\n    @default null\n  */\n  handle: null,\n\n  /**\n    True if the item is currently being dragged.\n    @property isDragging\n    @type Boolean\n    @default false\n  */\n  isDragging: false,\n\n  /**\n    Action that fires when the item starts being dragged.\n    @property onDragStart\n    @type Action\n    @default null\n  */\n  onDragStart: null,\n\n  /**\n    Action that fires when the item stops being dragged.\n    @property onDragStop\n    @type Action\n    @default null\n  */\n  onDragStop: null,\n\n  /**\n    True if the item is currently dropping.\n    @property isDropping\n    @type Boolean\n    @default false\n  */\n  isDropping: false,\n\n  /**\n    True if the item was dropped during the interaction\n    @property wasDropped\n    @type Boolean\n    @default false\n  */\n  wasDropped: false,\n\n\n  /**\n    @property isBusy\n    @type Boolean\n  */\n  isBusy: computed.or('isDragging', 'isDropping'),\n\n  /**\n    The frequency with which the group is informed\n    that an update is required.\n    @property updateInterval\n    @type Number\n    @default 125\n  */\n  updateInterval: 125,\n\n  /**\n    Additional spacing between active item and the rest of the elements.\n    @property spacing\n    @type Number\n    @default 0[px]\n  */\n  spacing: 0,\n\n  /**\n    True if the item transitions with animation.\n    @property isAnimated\n    @type Boolean\n  */\n  isAnimated: computed(function() {\n    if (!this.element || !this.$()) { return; }\n\n    let el = this.$();\n    let property = el.css('transition-property');\n\n    return /all|transform/.test(property);\n  }).volatile(),\n\n  /**\n    The current transition duration in milliseconds.\n    @property transitionDuration\n    @type Number\n  */\n  transitionDuration: computed(function() {\n    let el = this.$();\n    let rule = el.css('transition-duration');\n    let match = rule.match(/([\\d\\.]+)([ms]*)/);\n\n    if (match) {\n      let value = parseFloat(match[1]);\n      let unit = match[2];\n\n      if (unit === 's') {\n        value = value * 1000;\n      }\n\n      return value;\n    }\n\n    return 0;\n  }).volatile(),\n\n  /**\n    Horizontal position of the item.\n    @property x\n    @type Number\n  */\n  x: computed({\n    get() {\n      if (this._x === undefined) {\n        let marginLeft = parseFloat(this.$().css('margin-left'));\n        this._x = this.element.scrollLeft + this.element.offsetLeft - marginLeft;\n      }\n\n      return this._x;\n    },\n    set(_, value) {\n      if (value !== this._x) {\n        this._x = value;\n        this._scheduleApplyPosition();\n      }\n    },\n  }).volatile(),\n\n  /**\n    Vertical position of the item relative to its offset parent.\n    @property y\n    @type Number\n  */\n  y: computed({\n    get() {\n      if (this._y === undefined) {\n        this._y = this.element.offsetTop;\n      }\n\n      return this._y;\n    },\n    set(key, value) {\n      if (value !== this._y) {\n        this._y = value;\n        this._scheduleApplyPosition();\n      }\n    }\n  }).volatile(),\n\n  /**\n    Width of the item.\n    @property height\n    @type Number\n  */\n  width: computed(function() {\n    let el = this.$();\n    let width = el.outerWidth(true);\n\n    width += getBorderSpacing(el).horizontal;\n\n    return width;\n  }).volatile(),\n\n  /**\n    Height of the item including margins.\n    @property height\n    @type Number\n  */\n  height: computed(function() {\n    let el = this.$();\n    let height = el.outerHeight();\n\n    let marginBottom = parseFloat(el.css('margin-bottom'));\n    height += marginBottom;\n\n    height += getBorderSpacing(el).vertical;\n\n    return height;\n  }).volatile(),\n\n  /**\n    @method didInsertElement\n  */\n  didInsertElement() {\n    this._super();\n    // scheduled to prevent deprecation warning:\n    // \"never change properties on components, services or models during didInsertElement because it causes significant performance degradation\"\n    run.schedule(\"afterRender\", this, \"_tellGroup\", \"registerItem\", this);\n\n    // Instead of using `event.preventDefault()` in the 'primeDrag' event,\n    // (doesn't work in Chrome 56), we set touch-action: none as a workaround.\n    let element = this.get('handle') ? this.$(this.get('handle')) : this.$();\n    element.css({ 'touch-action': 'none' });\n  },\n\n  /**\n    @method willDestroyElement\n  */\n  willDestroyElement() {\n    // scheduled to prevent deprecation warning:\n    // \"never change properties on components, services or models during didInsertElement because it causes significant performance degradation\"\n    run.schedule(\"afterRender\", this, \"_tellGroup\", \"deregisterItem\", this);\n\n    // remove event listeners that may still be attached\n    $(window).off('mousemove touchmove', this._startDragListener);\n    $(window).off('click mouseup touchend', this._cancelStartDragListener);\n  },\n\n  /**\n    @method mouseDown\n  */\n  mouseDown(event) {\n    if (event.which !== 1) { return; }\n    if (event.ctrlKey) { return; }\n\n    this._primeDrag(event);\n  },\n\n  /**\n    @method touchStart\n  */\n  touchStart(event) {\n    this._primeDrag(event);\n  },\n\n  /**\n    @method freeze\n  */\n  freeze() {\n    let el = this.$();\n    if (!el) { return; }\n\n    el.css({ transition: 'none' });\n    el.height(); // Force-apply styles\n  },\n\n  /**\n    @method reset\n  */\n  reset() {\n    let el = this.$();\n    if (!el) { return; }\n\n    delete this._y;\n    delete this._x;\n\n    el.css({ transform: '' });\n    el.height(); // Force-apply styles\n  },\n\n  /**\n    @method thaw\n  */\n  thaw() {\n    let el = this.$();\n    if (!el) { return; }\n\n    el.css({ transition: '' });\n    el.height(); // Force-apply styles\n  },\n\n  /**\n    @method _primeDrag\n    @private\n  */\n  _primeDrag(event) {\n    let handle = this.get('handle');\n\n    if (handle && !$(event.target).closest(handle).length) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this._startDragListener = event => this._startDrag(event);\n\n    this._cancelStartDragListener = () => {\n      $(window).off('mousemove touchmove', this._startDragListener);\n    };\n\n    $(window).one('mousemove touchmove', this._startDragListener);\n    $(window).one('click mouseup touchend', this._cancelStartDragListener);\n  },\n\n  /**\n    @method _startDrag\n    @private\n  */\n  _startDrag(event) {\n    if (this.get('isBusy')) { return; }\n\n    let drag = this._makeDragHandler(event);\n    let dragThrottled = ev => throttle(this, drag, ev, 16, false);\n\n    let drop = () => {\n      $(window)\n        .off('mousemove touchmove', dragThrottled)\n        .off('click mouseup touchend', drop);\n\n      this._drop();\n    };\n\n    $(window)\n      .on('mousemove touchmove', dragThrottled)\n      .on('click mouseup touchend', drop);\n\n    this._tellGroup('prepare');\n    this.set('isDragging', true);\n    invokeAction(this, 'onDragStart', this.get('model'));\n\n    this._scrollOnEdges(drag);\n  },\n\n  /**\n    The maximum scroll speed when dragging element.\n    @property maxScrollSpeed\n    @default 20\n   */\n  maxScrollSpeed: 20,\n\n  _scrollOnEdges(drag) {\n    let groupDirection = this.get('group.direction');\n    let $element = this.$();\n    let scrollContainer = new ScrollContainer(scrollParent($element)[0]);\n    let itemContainer = {\n      width: $element.width(),\n      height: $element.height(),\n      get left() {\n        return $element.offset().left;\n      },\n      get right() {\n        return this.left + this.width;\n      },\n      get top() {\n        return $element.offset().top;\n      },\n      get bottom() {\n        return this.top + this.height;\n      }\n    };\n\n    let leadingEdgeKey, trailingEdgeKey, scrollKey, pageKey;\n    if (groupDirection === 'x') {\n      leadingEdgeKey = 'left';\n      trailingEdgeKey = 'right';\n      scrollKey = 'scrollLeft';\n      pageKey = 'pageX';\n    } else {\n      leadingEdgeKey = 'top';\n      trailingEdgeKey = 'bottom';\n      scrollKey = 'scrollTop';\n      pageKey = 'pageY';\n    }\n\n    let createFakeEvent = () => {\n      if (this._pageX == null && this._pageY == null) { return; }\n      return {\n        pageX: this._pageX,\n        pageY: this._pageY\n      };\n    };\n\n    // Set a trigger padding that will start scrolling\n    // the box when the item reaches within padding pixels\n    // of the edge of the scroll container.\n    let checkScrollBounds = () => {\n      let leadingEdge = itemContainer[leadingEdgeKey];\n      let trailingEdge = itemContainer[trailingEdgeKey];\n      let scroll = scrollContainer[scrollKey]();\n\n      let delta = 0;\n      if (trailingEdge >= scrollContainer[trailingEdgeKey]) {\n        delta = trailingEdge - scrollContainer[trailingEdgeKey];\n      } else if (leadingEdge <= scrollContainer[leadingEdgeKey]) {\n        delta = leadingEdge - scrollContainer[leadingEdgeKey];\n      }\n\n      if (delta !== 0) {\n        let speed = this.get('maxScrollSpeed');\n        delta = Math.min(Math.max(delta, -1 * speed), speed);\n\n        delta = scrollContainer[scrollKey](scroll + delta) - scroll;\n\n        let event = createFakeEvent();\n        if (event) {\n          if (scrollContainer.isWindow) {\n            event[pageKey] += delta;\n          }\n          run(() => drag(event));\n        }\n      }\n      if (this.get('isDragging')) {\n        requestAnimationFrame(checkScrollBounds);\n      }\n    };\n\n    if (!Ember.testing) {\n      requestAnimationFrame(checkScrollBounds);\n    }\n  },\n\n  /**\n    @method _makeDragHandler\n    @param {Event} startEvent\n    @return {Function}\n    @private\n  */\n  _makeDragHandler(startEvent) {\n    const groupDirection = this.get('group.direction');\n    let dragOrigin;\n    let elementOrigin;\n    let scrollOrigin;\n    let parentElement = $(this.element.parentNode);\n\n    if (groupDirection === 'x') {\n      dragOrigin = getX(startEvent);\n      elementOrigin = this.get('x');\n      scrollOrigin = parentElement.offset().left;\n\n      return event => {\n        this._pageX = getX(event);\n        let dx = this._pageX - dragOrigin;\n        let scrollX = parentElement.offset().left;\n        let x = elementOrigin + dx + (scrollOrigin - scrollX);\n\n        this._drag(x);\n      };\n    }\n\n    if (groupDirection === 'y') {\n      dragOrigin = getY(startEvent);\n      elementOrigin = this.get('y');\n      scrollOrigin = parentElement.offset().top;\n\n      return event => {\n        this._pageY = getY(event);\n        let dy = this._pageY - dragOrigin;\n        let scrollY = parentElement.offset().top;\n        let y = elementOrigin + dy + (scrollOrigin - scrollY);\n\n        this._drag(y);\n      };\n    }\n  },\n\n  /**\n    @method _tellGroup\n    @private\n  */\n  _tellGroup(method, ...args) {\n    let group = this.get('group');\n\n    if (group) {\n      group[method](...args);\n    }\n  },\n\n  /**\n    @method _scheduleApplyPosition\n    @private\n  */\n  _scheduleApplyPosition() {\n    run.scheduleOnce('render', this, '_applyPosition');\n  },\n\n  /**\n    @method _applyPosition\n    @private\n  */\n  _applyPosition() {\n    if (!this.element || !this.$()) { return; }\n\n    const groupDirection = this.get('group.direction');\n\n    if (groupDirection === 'x') {\n      let x = this.get('x');\n      let dx = x - this.element.offsetLeft + parseFloat(this.$().css('margin-left'));\n\n      this.$().css({\n        transform: `translateX(${dx}px)`\n      });\n    }\n    if (groupDirection === 'y') {\n      let y = this.get('y');\n      let dy = y - this.element.offsetTop;\n\n      this.$().css({\n        transform: `translateY(${dy}px)`\n      });\n    }\n  },\n\n  /**\n    @method _drag\n    @private\n  */\n  _drag(dimension) {\n    let updateInterval = this.get('updateInterval');\n    const groupDirection = this.get('group.direction');\n\n    if (groupDirection === 'x') {\n      this.set('x', dimension);\n    }\n    if (groupDirection === 'y') {\n      this.set('y', dimension);\n    }\n\n    run.throttle(this, '_tellGroup', 'update', updateInterval);\n  },\n\n  /**\n    @method _drop\n    @private\n  */\n  _drop() {\n    if (!this.element || !this.$()) { return; }\n\n    this._preventClick(this.element);\n\n    this.set('isDragging', false);\n    this.set('isDropping', true);\n\n    this._tellGroup('update');\n\n    this._waitForTransition()\n      .then(run.bind(this, '_complete'));\n  },\n\n  /**\n    @method _preventClick\n    @private\n  */\n  _preventClick(element) {\n    $(element).one('click', function(e){ e.stopImmediatePropagation(); } );\n  },\n\n  /**\n    @method _waitForTransition\n    @private\n    @return Promise\n  */\n  _waitForTransition() {\n    return new Promise(resolve => {\n      run.next(() => {\n        let duration = 0;\n\n        if (this.get('isAnimated')) {\n          duration = this.get('transitionDuration');\n        }\n\n        run.later(this, resolve, duration);\n      });\n    });\n  },\n\n  /**\n    @method _complete\n    @private\n  */\n  _complete() {\n    invokeAction(this, 'onDragStop', this.get('model'));\n    this.set('isDropping', false);\n    this.set('wasDropped', true);\n    this._tellGroup('commit');\n  }\n});\n\n/**\n  Gets the y offset for a given event.\n  Work for touch and mouse events.\n  @method getY\n  @return {Number}\n  @private\n*/\nfunction getY(event) {\n  let originalEvent = event.originalEvent;\n  let touches = originalEvent && originalEvent.changedTouches;\n  let touch = touches && touches[0];\n\n  if (touch) {\n    return touch.screenY;\n  } else {\n    return event.pageY;\n  }\n}\n\n/**\n  Gets the x offset for a given event.\n  @method getX\n  @return {Number}\n  @private\n*/\nfunction getX(event) {\n  let originalEvent = event.originalEvent;\n  let touches = originalEvent && originalEvent.changedTouches;\n  let touch = touches && touches[0];\n\n  if (touch) {\n    return touch.screenX;\n  } else {\n    return event.pageX;\n  }\n}\n\n/**\n  Gets a numeric border-spacing values for a given element.\n\n  @method getBorderSpacing\n  @param {Element} element\n  @return {Object}\n  @private\n*/\nfunction getBorderSpacing(el) {\n  el = $(el);\n\n  let css = el.css('border-spacing'); // '0px 0px'\n  let [horizontal, vertical] = css.split(' ');\n\n  return {\n    horizontal: parseFloat(horizontal),\n    vertical: parseFloat(vertical)\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/addon/system/scroll-container.js":"import Ember from 'ember';\nconst { $ } = Ember;\n\nexport default class ScrollContainer {\n  constructor(element) {\n    this.element = element;\n    this.isWindow = element === document;\n    if (this.isWindow) {\n      this.top = this.scrollTop();\n      this.left = this.scrollLeft();\n      this.width = $(window).width();\n      this.height = $(window).height();\n      this.scrollWidth = this.$().width();\n      this.scrollHeight = this.$().height();\n    } else {\n      let { top, left } = this.$().offset();\n      this.top = top;\n      this.left = left;\n      this.width = this.$().width();\n      this.height = this.$().height();\n      this.scrollWidth = element.scrollWidth;\n      this.scrollHeight = element.scrollHeight;\n    }\n    this.maxScrollTop = this.scrollHeight - this.height;\n    this.maxScrollLeft = this.scrollWidth - this.width;\n  }\n\n  get bottom() {\n    return this.top + this.height;\n  }\n\n  get right() {\n    return this.left + this.width;\n  }\n\n  scrollTop(value) {\n    if (value) {\n      value = Math.max(0, Math.min(this.maxScrollTop, value));\n      this.$().scrollTop(value);\n      if (this.isWindow) {\n        this.top = value;\n      }\n      return value;\n    }\n    return this.$().scrollTop();\n  }\n\n  scrollLeft(value) {\n    if (value) {\n      value = Math.max(0, Math.min(this.maxScrollLeft, value));\n      this.$().scrollLeft(value);\n      if (this.isWindow) {\n        this.left = value;\n      }\n      return value;\n    }\n    return this.$().scrollLeft();\n  }\n\n  $(selector) {\n    let element = this.element;\n    if (selector) {\n      return $(element).find(selector);\n    } else {\n      return $(element);\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/addon/system/scroll-parent.js":"import Ember from 'ember';\nconst { $ } = Ember;\n\nexport default function ($element) {\n  let position = $element.css('position');\n  let excludeStaticParent = position === 'absolute';\n  let $scrollParent = $element.parents().filter(function () {\n    let $parent = $(this);\n    if (excludeStaticParent && $parent.css('position') === 'static') {\n      return false;\n    }\n    let { overflow, overflowX, overflowY } = $parent.css(['overflow', 'overflowX', 'overflowY']);\n    return /(auto|scroll)/.test(overflow + overflowX + overflowY);\n  }).eq(0);\n\n  if ($scrollParent.length === 0 ||\n      $scrollParent[0] === document.body) {\n    $scrollParent = $(document);\n  }\n  return position === 'fixed' || $scrollParent;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/addon/utils/transitionend.js":"// Thanks to http://davidwalsh.name/css-animation-callback\n\nfunction whichTransitionEvent() {\n  var t;\n  var el = document.createElement('fake-element');\n  var transitions = {\n    'transition': 'transitionend',\n    'OTransition': 'oTransitionEnd',\n    'MozTransition': 'transitionend',\n    'WebkitTransition': 'webkitTransitionEnd'\n  };\n\n  for (t in transitions) {\n    if (el.style[t] !== undefined) {\n      return transitions[t];\n    }\n  }\n}\n\nconst transitionend = whichTransitionEvent();\n\nexport default transitionend;\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/app/components/sortable-group.js":"import sortableGroup from 'ember-sortable/components/sortable-group';\n\nexport default sortableGroup;\n","/home/travis/build/npmtest/node-npmtest-ember-sortable/node_modules/ember-sortable/app/components/sortable-item.js":"import sortableItem from 'ember-sortable/components/sortable-item';\n\nexport default sortableItem;\n"}